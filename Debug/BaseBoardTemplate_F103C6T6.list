
BaseBoardTemplate_F103C6T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080013e4  080013e4  000113e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001414  08001414  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001414  08001414  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001414  08001414  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001414  08001414  00011414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001418  08001418  00011418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800141c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  2000000c  08001428  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08001428  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2fe  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002262  00000000  00000000  0002a333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00002a1c  00000000  00000000  0002c595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000488  00000000  00000000  0002efb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000920  00000000  00000000  0002f440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b8a  00000000  00000000  0002fd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008984  00000000  00000000  000498ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a84e  00000000  00000000  0005226e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000dcabc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ac8  00000000  00000000  000dcb0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080013cc 	.word	0x080013cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080013cc 	.word	0x080013cc

0800014c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800014c:	b508      	push	{r3, lr}

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 2;
 800014e:	2302      	movs	r3, #2
  hcan.Instance = CAN1;
 8000150:	480b      	ldr	r0, [pc, #44]	; (8000180 <MX_CAN_Init+0x34>)
  hcan.Init.Prescaler = 2;
 8000152:	4a0c      	ldr	r2, [pc, #48]	; (8000184 <MX_CAN_Init+0x38>)
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000154:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
  hcan.Init.Prescaler = 2;
 8000158:	e9c0 2300 	strd	r2, r3, [r0]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800015c:	2300      	movs	r3, #0
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800015e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000162:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000164:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000166:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800016a:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800016e:	f000 fafb 	bl	8000768 <HAL_CAN_Init>
 8000172:	b118      	cbz	r0, 800017c <MX_CAN_Init+0x30>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000174:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000178:	f000 b906 	b.w	8000388 <Error_Handler>
}
 800017c:	bd08      	pop	{r3, pc}
 800017e:	bf00      	nop
 8000180:	20000028 	.word	0x20000028
 8000184:	40006400 	.word	0x40006400

08000188 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000188:	b510      	push	{r4, lr}
 800018a:	4604      	mov	r4, r0
 800018c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800018e:	2210      	movs	r2, #16
 8000190:	2100      	movs	r1, #0
 8000192:	a802      	add	r0, sp, #8
 8000194:	f001 f912 	bl	80013bc <memset>
  if(canHandle->Instance==CAN1)
 8000198:	6822      	ldr	r2, [r4, #0]
 800019a:	4b1e      	ldr	r3, [pc, #120]	; (8000214 <HAL_CAN_MspInit+0x8c>)
 800019c:	429a      	cmp	r2, r3
 800019e:	d136      	bne.n	800020e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001a0:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80001a4:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001a6:	481c      	ldr	r0, [pc, #112]	; (8000218 <HAL_CAN_MspInit+0x90>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001a8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80001ac:	61da      	str	r2, [r3, #28]
 80001ae:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001b0:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001b2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80001b6:	9200      	str	r2, [sp, #0]
 80001b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ba:	699a      	ldr	r2, [r3, #24]
 80001bc:	f042 0208 	orr.w	r2, r2, #8
 80001c0:	619a      	str	r2, [r3, #24]
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0308 	and.w	r3, r3, #8
 80001c8:	9301      	str	r3, [sp, #4]
 80001ca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80001cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001d0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001d2:	f000 fd0b 	bl	8000bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80001d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001da:	2302      	movs	r3, #2
 80001dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001e0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001e2:	480d      	ldr	r0, [pc, #52]	; (8000218 <HAL_CAN_MspInit+0x90>)
 80001e4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001e6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001e8:	f000 fd00 	bl	8000bec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80001ec:	4a0b      	ldr	r2, [pc, #44]	; (800021c <HAL_CAN_MspInit+0x94>)

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80001ee:	2014      	movs	r0, #20
    __HAL_AFIO_REMAP_CAN1_2();
 80001f0:	6853      	ldr	r3, [r2, #4]
 80001f2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80001f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80001fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80001fe:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000200:	2200      	movs	r2, #0
 8000202:	4611      	mov	r1, r2
 8000204:	f000 fc8a 	bl	8000b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000208:	2014      	movs	r0, #20
 800020a:	f000 fcb9 	bl	8000b80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800020e:	b006      	add	sp, #24
 8000210:	bd10      	pop	{r4, pc}
 8000212:	bf00      	nop
 8000214:	40006400 	.word	0x40006400
 8000218:	40010c00 	.word	0x40010c00
 800021c:	40010000 	.word	0x40010000

08000220 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8000220:	b508      	push	{r3, lr}

  if(canHandle->Instance==CAN1)
 8000222:	6802      	ldr	r2, [r0, #0]
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <HAL_CAN_MspDeInit+0x2c>)
 8000226:	429a      	cmp	r2, r3
 8000228:	d10e      	bne.n	8000248 <HAL_CAN_MspDeInit+0x28>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 800022a:	4a09      	ldr	r2, [pc, #36]	; (8000250 <HAL_CAN_MspDeInit+0x30>)

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 800022c:	4809      	ldr	r0, [pc, #36]	; (8000254 <HAL_CAN_MspDeInit+0x34>)
    __HAL_RCC_CAN1_CLK_DISABLE();
 800022e:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8000230:	f44f 7140 	mov.w	r1, #768	; 0x300
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000234:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000238:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 800023a:	f000 fdad 	bl	8000d98 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 800023e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000242:	2014      	movs	r0, #20
 8000244:	f000 bcaa 	b.w	8000b9c <HAL_NVIC_DisableIRQ>
}
 8000248:	bd08      	pop	{r3, pc}
 800024a:	bf00      	nop
 800024c:	40006400 	.word	0x40006400
 8000250:	40021000 	.word	0x40021000
 8000254:	40010c00 	.word	0x40010c00

08000258 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000258:	2210      	movs	r2, #16
{
 800025a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800025e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000260:	eb0d 0002 	add.w	r0, sp, r2
 8000264:	2100      	movs	r1, #0
 8000266:	f001 f8a9 	bl	80013bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800026a:	4b26      	ldr	r3, [pc, #152]	; (8000304 <MX_GPIO_Init+0xac>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 800026c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8000308 <MX_GPIO_Init+0xb0>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000270:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000272:	4c26      	ldr	r4, [pc, #152]	; (800030c <MX_GPIO_Init+0xb4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000274:	f042 0210 	orr.w	r2, r2, #16
 8000278:	619a      	str	r2, [r3, #24]
 800027a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 800027c:	4640      	mov	r0, r8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800027e:	f002 0210 	and.w	r2, r2, #16
 8000282:	9200      	str	r2, [sp, #0]
 8000284:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000286:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8000288:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800028c:	f042 0220 	orr.w	r2, r2, #32
 8000290:	619a      	str	r2, [r3, #24]
 8000292:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_CAN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000294:	2701      	movs	r7, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000296:	f002 0220 	and.w	r2, r2, #32
 800029a:	9201      	str	r2, [sp, #4]
 800029c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a0:	2600      	movs	r6, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a2:	f042 0208 	orr.w	r2, r2, #8
 80002a6:	619a      	str	r2, [r3, #24]
 80002a8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002aa:	2502      	movs	r5, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ac:	f002 0208 	and.w	r2, r2, #8
 80002b0:	9202      	str	r2, [sp, #8]
 80002b2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b4:	699a      	ldr	r2, [r3, #24]
 80002b6:	f042 0204 	orr.w	r2, r2, #4
 80002ba:	619a      	str	r2, [r3, #24]
 80002bc:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c0:	f003 0304 	and.w	r3, r3, #4
 80002c4:	9303      	str	r3, [sp, #12]
 80002c6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 80002c8:	f000 fdce 	bl	8000e68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	4620      	mov	r0, r4
 80002d0:	2103      	movs	r1, #3
 80002d2:	f000 fdc9 	bl	8000e68 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(LED_CAN_GPIO_Port, &GPIO_InitStruct);
 80002da:	4640      	mov	r0, r8
 80002dc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002de:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e2:	e9cd 6506 	strd	r6, r5, [sp, #24]
  HAL_GPIO_Init(LED_CAN_GPIO_Port, &GPIO_InitStruct);
 80002e6:	f000 fc81 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_YELLOW_Pin;
 80002ea:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ec:	4620      	mov	r0, r4
 80002ee:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f0:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f4:	e9cd 6506 	strd	r6, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f8:	f000 fc78 	bl	8000bec <HAL_GPIO_Init>

}
 80002fc:	b008      	add	sp, #32
 80002fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000
 8000308:	40011000 	.word	0x40011000
 800030c:	40010c00 	.word	0x40010c00

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b510      	push	{r4, lr}
 8000312:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000314:	2214      	movs	r2, #20
 8000316:	2100      	movs	r1, #0
 8000318:	a808      	add	r0, sp, #32
 800031a:	f001 f84f 	bl	80013bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031e:	2214      	movs	r2, #20
 8000320:	2100      	movs	r1, #0
 8000322:	a801      	add	r0, sp, #4
 8000324:	f001 f84a 	bl	80013bc <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000328:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800032a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000330:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000334:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000338:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000340:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000342:	f000 fd97 	bl	8000e74 <HAL_RCC_OscConfig>
 8000346:	b108      	cbz	r0, 800034c <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000348:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800034a:	e7fe      	b.n	800034a <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034e:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000352:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000356:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000358:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800035c:	4621      	mov	r1, r4
 800035e:	a801      	add	r0, sp, #4
 8000360:	f000 ff5e 	bl	8001220 <HAL_RCC_ClockConfig>
 8000364:	b108      	cbz	r0, 800036a <SystemClock_Config+0x5a>
 8000366:	b672      	cpsid	i
  while (1)
 8000368:	e7fe      	b.n	8000368 <SystemClock_Config+0x58>
}
 800036a:	b010      	add	sp, #64	; 0x40
 800036c:	bd10      	pop	{r4, pc}

0800036e <main>:
{
 800036e:	b508      	push	{r3, lr}
  HAL_Init();
 8000370:	f000 f9d6 	bl	8000720 <HAL_Init>
  SystemClock_Config();
 8000374:	f7ff ffcc 	bl	8000310 <SystemClock_Config>
  MX_GPIO_Init();
 8000378:	f7ff ff6e 	bl	8000258 <MX_GPIO_Init>
  MX_CAN_Init();
 800037c:	f7ff fee6 	bl	800014c <MX_CAN_Init>
  mymain();
 8000380:	f000 f8c8 	bl	8000514 <mymain>
}
 8000384:	2000      	movs	r0, #0
 8000386:	bd08      	pop	{r3, pc}

08000388 <Error_Handler>:
 8000388:	b672      	cpsid	i
  while (1)
 800038a:	e7fe      	b.n	800038a <Error_Handler+0x2>

0800038c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <HAL_MspInit+0x3c>)
{
 800038e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000390:	699a      	ldr	r2, [r3, #24]
 8000392:	f042 0201 	orr.w	r2, r2, #1
 8000396:	619a      	str	r2, [r3, #24]
 8000398:	699a      	ldr	r2, [r3, #24]
 800039a:	f002 0201 	and.w	r2, r2, #1
 800039e:	9200      	str	r2, [sp, #0]
 80003a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	69da      	ldr	r2, [r3, #28]
 80003a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003a8:	61da      	str	r2, [r3, #28]
 80003aa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ac:	4a07      	ldr	r2, [pc, #28]	; (80003cc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003b6:	6853      	ldr	r3, [r2, #4]
 80003b8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c2:	b002      	add	sp, #8
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40010000 	.word	0x40010000

080003d0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <NMI_Handler>

080003d2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d2:	e7fe      	b.n	80003d2 <HardFault_Handler>

080003d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <MemManage_Handler>

080003d6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <BusFault_Handler>

080003d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <UsageFault_Handler>

080003da <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003da:	4770      	bx	lr

080003dc <DebugMon_Handler>:
 80003dc:	4770      	bx	lr

080003de <PendSV_Handler>:
 80003de:	4770      	bx	lr

080003e0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e0:	f000 b9b0 	b.w	8000744 <HAL_IncTick>

080003e4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80003e4:	4801      	ldr	r0, [pc, #4]	; (80003ec <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80003e6:	f000 ba89 	b.w	80008fc <HAL_CAN_IRQHandler>
 80003ea:	bf00      	nop
 80003ec:	20000028 	.word	0x20000028

080003f0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003f0:	4770      	bx	lr

080003f2 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE>:
		u8 time_segment_1{15};
		u8 time_segment_2{2};

		constexpr u32 calc_btr() const noexcept
		{
			return (prescaler - 1) << RegisterMap::BTR::shiftBRP
 80003f2:	8803      	ldrh	r3, [r0, #0]
		bool auto_wake_up{false};
		// bool no_auto_retransmission{false};  /// @todo 未対応
		bool receive_fifo_locked{false};
		bool transmit_fifo_priority{false};

		void apply(CanRegister *const bxcan) const noexcept
 80003f4:	b570      	push	{r4, r5, r6, lr}
			return (prescaler - 1) << RegisterMap::BTR::shiftBRP
 80003f6:	1e5a      	subs	r2, r3, #1
				| (to_underlying(test_mode) & 0x1 ? RegisterMap::BTR::LBKM : 0)
 80003f8:	7883      	ldrb	r3, [r0, #2]
 80003fa:	f013 0f01 	tst.w	r3, #1
 80003fe:	bf14      	ite	ne
 8000400:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8000404:	2600      	moveq	r6, #0
				| (to_underlying(test_mode) & 0x2 ? RegisterMap::BTR::SILM : 0)
 8000406:	f013 0f02 	tst.w	r3, #2
 800040a:	bf14      	ite	ne
 800040c:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
 8000410:	2500      	moveq	r5, #0
				| (resyncronization_jump_width - 1) << RegisterMap::BTR::shiftSJW
 8000412:	78c3      	ldrb	r3, [r0, #3]
 8000414:	1e5c      	subs	r4, r3, #1
				| (time_segment_1 - 1) << RegisterMap::BTR::shiftTS1
 8000416:	7903      	ldrb	r3, [r0, #4]
 8000418:	3b01      	subs	r3, #1
 800041a:	041b      	lsls	r3, r3, #16
				| (time_segment_2 - 1) << RegisterMap::BTR::shiftTS2;
 800041c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8000420:	4313      	orrs	r3, r2
 8000422:	7942      	ldrb	r2, [r0, #5]
 8000424:	3a01      	subs	r2, #1
 8000426:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
	}

	template<std::unsigned_integral T>
	inline constexpr void change_masked_range(T& value, const std::type_identity_t<T> mask, const std::type_identity_t<T> new_value) noexcept
	{
		value = (value & ~mask) | (new_value & mask);
 800042a:	69ca      	ldr	r2, [r1, #28]
 800042c:	4333      	orrs	r3, r6
 800042e:	f022 4243 	bic.w	r2, r2, #3271557120	; 0xc3000000
 8000432:	432b      	orrs	r3, r5
 8000434:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000438:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800043c:	f023 5372 	bic.w	r3, r3, #1015021568	; 0x3c800000
 8000440:	f022 0203 	bic.w	r2, r2, #3
 8000444:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8000448:	4313      	orrs	r3, r2
 800044a:	61cb      	str	r3, [r1, #28]
		{
			BitOperation::change_masked_range(bxcan->BTR, BitTiming::mask, bit_timing.calc_btr());

			constexpr u32 mcr_mask = RegisterMap::MCR::DBF | RegisterMap::MCR::TTCM | RegisterMap::MCR::ABOM | RegisterMap::MCR::AWUM | RegisterMap::MCR::RFLM | RegisterMap::MCR::TXFP;
			const u32 new_mcr = (debug_freeze ? RegisterMap::MCR::DBF : 0) |
 800044c:	7983      	ldrb	r3, [r0, #6]
				(time_triggered ? RegisterMap::MCR::TTCM : 0) |
 800044e:	79c2      	ldrb	r2, [r0, #7]
			const u32 new_mcr = (debug_freeze ? RegisterMap::MCR::DBF : 0) |
 8000450:	2b00      	cmp	r3, #0
 8000452:	bf14      	ite	ne
 8000454:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8000458:	2300      	moveq	r3, #0
				(time_triggered ? RegisterMap::MCR::TTCM : 0) |
 800045a:	2a00      	cmp	r2, #0
 800045c:	bf14      	ite	ne
 800045e:	2280      	movne	r2, #128	; 0x80
 8000460:	2200      	moveq	r2, #0
			const u32 new_mcr = (debug_freeze ? RegisterMap::MCR::DBF : 0) |
 8000462:	4313      	orrs	r3, r2
				(auto_bus_off_recovery ? RegisterMap::MCR::ABOM : 0) |
 8000464:	7a02      	ldrb	r2, [r0, #8]
 8000466:	2a00      	cmp	r2, #0
 8000468:	bf14      	ite	ne
 800046a:	2240      	movne	r2, #64	; 0x40
 800046c:	2200      	moveq	r2, #0
				(time_triggered ? RegisterMap::MCR::TTCM : 0) |
 800046e:	4313      	orrs	r3, r2
				(auto_wake_up ? RegisterMap::MCR::AWUM : 0) |
 8000470:	7a42      	ldrb	r2, [r0, #9]
 8000472:	2a00      	cmp	r2, #0
 8000474:	bf14      	ite	ne
 8000476:	2220      	movne	r2, #32
 8000478:	2200      	moveq	r2, #0
				(auto_bus_off_recovery ? RegisterMap::MCR::ABOM : 0) |
 800047a:	4313      	orrs	r3, r2
				// (no_auto_retransmission ? RegisterMap::MCR::NART : 0) |
				(receive_fifo_locked ? RegisterMap::MCR::RFLM : 0) |
 800047c:	7a82      	ldrb	r2, [r0, #10]
 800047e:	2a00      	cmp	r2, #0
 8000480:	bf14      	ite	ne
 8000482:	2208      	movne	r2, #8
 8000484:	2200      	moveq	r2, #0
				(auto_wake_up ? RegisterMap::MCR::AWUM : 0) |
 8000486:	4313      	orrs	r3, r2
				(transmit_fifo_priority ? RegisterMap::MCR::TXFP : 0);
 8000488:	7ac2      	ldrb	r2, [r0, #11]
 800048a:	2a00      	cmp	r2, #0
 800048c:	bf14      	ite	ne
 800048e:	2004      	movne	r0, #4
 8000490:	2000      	moveq	r0, #0
 8000492:	680a      	ldr	r2, [r1, #0]
 8000494:	4303      	orrs	r3, r0
 8000496:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800049a:	f022 02ec 	bic.w	r2, r2, #236	; 0xec
 800049e:	4313      	orrs	r3, r2
 80004a0:	600b      	str	r3, [r1, #0]

			BitOperation::change_masked_range(bxcan->MCR, mcr_mask, new_mcr);
		}
 80004a2:	bd70      	pop	{r4, r5, r6, pc}

080004a4 <_ZN6CRSLib3Can5Stm326RM000813FilterManager10initializeILh1EEEvhRAT__KNS2_12FilterConfigE>:
	{
		T& value;
		const std::type_identity_t<T> bit;

		constexpr PinnedBit(T& value, const std::type_identity_t<T> bit) noexcept
			: value{value}, bit{bit}
 80004a4:	2301      	movs	r3, #1

	namespace FilterManager
	{
		template<u8 n>
		requires (n <= filter_bank_size)
		inline void initialize(const u8 can2sb, const FilterConfig (& filters)[n]) noexcept
 80004a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80004a8:	9301      	str	r3, [sp, #4]
		value = value | bit;
 80004aa:	4b18      	ldr	r3, [pc, #96]	; (800050c <_ZN6CRSLib3Can5Stm326RM000813FilterManager10initializeILh1EEEvhRAT__KNS2_12FilterConfigE+0x68>)
					u8 i = 0;
					for(const auto filter : filters)
					{
						is_list_mode |= (filter.is_list_mode ? 1 : 0) << i;
						is_32bit |= (filter.is_32bit ? 1 : 0) << i;
						is_fifo1 |= (filter.is_fifo1 ? 1 : 0) << i;
 80004ac:	788d      	ldrb	r5, [r1, #2]
 80004ae:	f8d3 4600 	ldr.w	r4, [r3, #1536]	; 0x600
 80004b2:	f044 0401 	orr.w	r4, r4, #1
 80004b6:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
 80004ba:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
		value = (value & ~mask) | (new_value & mask);
 80004be:	4c14      	ldr	r4, [pc, #80]	; (8000510 <_ZN6CRSLib3Can5Stm326RM000813FilterManager10initializeILh1EEEvhRAT__KNS2_12FilterConfigE+0x6c>)
		value = value | bit;
 80004c0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80004c4:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		value = (value & ~mask) | (new_value & mask);
 80004c8:	f8d3 0604 	ldr.w	r0, [r3, #1540]	; 0x604
						is_32bit |= (filter.is_32bit ? 1 : 0) << i;
 80004cc:	784a      	ldrb	r2, [r1, #1]
 80004ce:	7809      	ldrb	r1, [r1, #0]
 80004d0:	4020      	ands	r0, r4
 80004d2:	4308      	orrs	r0, r1
 80004d4:	f8c3 0604 	str.w	r0, [r3, #1540]	; 0x604
 80004d8:	f8d3 160c 	ldr.w	r1, [r3, #1548]	; 0x60c
 80004dc:	4021      	ands	r1, r4
 80004de:	4311      	orrs	r1, r2
 80004e0:	f8c3 160c 	str.w	r1, [r3, #1548]	; 0x60c
 80004e4:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80004e8:	4022      	ands	r2, r4
 80004ea:	432a      	orrs	r2, r5
 80004ec:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
 80004f0:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80004f4:	4014      	ands	r4, r2
 80004f6:	f8c3 461c 	str.w	r4, [r3, #1564]	; 0x61c
			set_bit(value, bit);
		}

		~PinnedBit() noexcept
		{
			clear_bit(value, bit);
 80004fa:	9901      	ldr	r1, [sp, #4]
		value = value & ~bit;
 80004fc:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8000500:	ea22 0201 	bic.w	r2, r2, r1
 8000504:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
				BitOperation::change_masked_range(filter_bank->FMoR, filter_bank_mask, is_list_mode);
				BitOperation::change_masked_range(filter_bank->FSR, filter_bank_mask, is_32bit);
				BitOperation::change_masked_range(filter_bank->FFAR, filter_bank_mask, is_fifo1);
				BitOperation::change_masked_range(filter_bank->FAR, filter_bank_mask, 0x0U);
			}
		}
 8000508:	b003      	add	sp, #12
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	40006000 	.word	0x40006000
 8000510:	ffffc000 	.word	0xffffc000

08000514 <mymain>:
using namespace CRSLib::IntegerTypes;
using namespace CRSLib::Can::Stm32::RM0008;
using CRSLib::Can::DataField;

extern "C" void mymain(CAN_HandleTypeDef *const hcan)
{
 8000514:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000516:	4604      	mov	r4, r0
	// ここでCANのMSP(ピンやクロックなど。ここまで書ききるのはキツかった...)の初期化を行う
	HAL_CAN_DeInit(hcan);
 8000518:	f000 f9cf 	bl	80008ba <HAL_CAN_DeInit>
	HAL_CAN_MspInit(hcan);
 800051c:	4620      	mov	r0, r4
 800051e:	f7ff fe33 	bl	8000188 <HAL_CAN_MspInit>
//	filter_configs[Servo] = FilterConfig::make_default(Fifo::Fifo0);
//	filter_configs[InjectSpeed] = FilterConfig::make_default(Fifo::Fifo0);
//	filter_configs[SolenoidValve] = FilterConfig::make_default(Fifo::Fifo0);
//	filter_configs[MotorState] = FilterConfig::make_default(Fifo::Fifo1);

	FilterConfig filter_configs[1];
 8000522:	2301      	movs	r3, #1
 8000524:	f88d 3000 	strb.w	r3, [sp]
 8000528:	f88d 3001 	strb.w	r3, [sp, #1]
 800052c:	2300      	movs	r3, #0
	filter_configs[GreetFromRos] = FilterConfig::make_default(Fifo::Fifo0);
	
	// *先に*フィルタの初期化を行う。先にCanBusを初期化すると先にNormalModeに以降してしまい、これはRM0008に違反する。
	FilterManager::initialize(filter_bank_size, filter_configs);
 800052e:	4669      	mov	r1, sp
 8000530:	200e      	movs	r0, #14
	FilterConfig filter_configs[1];
 8000532:	f88d 3002 	strb.w	r3, [sp, #2]
 8000536:	f88d 3003 	strb.w	r3, [sp, #3]
	FilterManager::initialize(filter_bank_size, filter_configs);
 800053a:	f7ff ffb3 	bl	80004a4 <_ZN6CRSLib3Can5Stm326RM000813FilterManager10initializeILh1EEEvhRAT__KNS2_12FilterConfigE>

	// 通信開始
	CanBus can_bus{can1};
 800053e:	4a4f      	ldr	r2, [pc, #316]	; (800067c <mymain+0x168>)
 8000540:	ab02      	add	r3, sp, #8
 8000542:	6810      	ldr	r0, [r2, #0]
 8000544:	6851      	ldr	r1, [r2, #4]
 8000546:	c303      	stmia	r3!, {r0, r1}
 8000548:	6890      	ldr	r0, [r2, #8]
		}

		void enter_initialization() noexcept
		{
			BitOperation::set_bit(bxcan->MCR, RegisterMap::MCR::INRQ);
			while(BitOperation::is_bit_set(bxcan->MSR, RegisterMap::MSR::INAK));
 800054a:	494d      	ldr	r1, [pc, #308]	; (8000680 <mymain+0x16c>)
 800054c:	6018      	str	r0, [r3, #0]
		value = value | bit;
 800054e:	4b4d      	ldr	r3, [pc, #308]	; (8000684 <mymain+0x170>)
 8000550:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8000554:	f042 0201 	orr.w	r2, r2, #1
 8000558:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800055c:	684a      	ldr	r2, [r1, #4]
 800055e:	07d6      	lsls	r6, r2, #31
 8000560:	d4fc      	bmi.n	800055c <mymain+0x48>
		value = value & ~bit;
 8000562:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8000566:	f022 0202 	bic.w	r2, r2, #2
 800056a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
			while(BitOperation::is_bit_clear(bxcan->MSR, RegisterMap::MSR::SLAK));
 800056e:	684b      	ldr	r3, [r1, #4]
 8000570:	079d      	lsls	r5, r3, #30
 8000572:	d5fc      	bpl.n	800056e <mymain+0x5a>
			init.apply(bxcan);
 8000574:	4942      	ldr	r1, [pc, #264]	; (8000680 <mymain+0x16c>)
 8000576:	a802      	add	r0, sp, #8
 8000578:	f7ff ff3b 	bl	80003f2 <_ZNK6CRSLib3Can5Stm326RM000810CanBusInit5applyEPNS2_11CanRegisterE>
 800057c:	4a41      	ldr	r2, [pc, #260]	; (8000684 <mymain+0x170>)
 800057e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
		}

		void leave_initialization() noexcept
		{
			BitOperation::clear_bit(bxcan->MCR, RegisterMap::MCR::INRQ);
			while(BitOperation::is_bit_clear(bxcan->MSR, RegisterMap::MSR::INAK));
 8000582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000586:	f023 0301 	bic.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	6853      	ldr	r3, [r2, #4]
 800058e:	07dc      	lsls	r4, r3, #31
 8000590:	d5fc      	bpl.n	800058c <mymain+0x78>
			if((bxcan->RFxR[fifo_] & RegisterMap::RFxR::FMP) >> RegisterMap::RFxR::shiftFMP == 0)
 8000592:	4c3b      	ldr	r4, [pc, #236]	; (8000680 <mymain+0x16c>)
					bxcan->TxMailBoxes[code].MDLR = tmp;
 8000594:	4e3c      	ldr	r6, [pc, #240]	; (8000688 <mymain+0x174>)
		value = value | bit;
 8000596:	4d3b      	ldr	r5, [pc, #236]	; (8000684 <mymain+0x170>)
			if((bxcan->RFxR[fifo_] & RegisterMap::RFxR::FMP) >> RegisterMap::RFxR::shiftFMP == 0)
 8000598:	68e3      	ldr	r3, [r4, #12]
 800059a:	0798      	lsls	r0, r3, #30
 800059c:	d0fc      	beq.n	8000598 <mymain+0x84>
#include <CRSLibtmp/utility.hpp>
#include <CRSLibtmp/std_type.hpp>

namespace CRSLib::Can
{
	struct DataField final
 800059e:	2300      	movs	r3, #0
 80005a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
				msg.data.dlc = mailbox.MDTR & RegisterMap::MDTR::DLC >> RegisterMap::MDTR::shiftDLC;
 80005a4:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 80005a8:	f002 020f 	and.w	r2, r2, #15
 80005ac:	f88d 2010 	strb.w	r2, [sp, #16]
				if(msg.data.dlc <= 4)
 80005b0:	2a04      	cmp	r2, #4
					const u32 tmp = mailbox.MDLR;
 80005b2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
				if(msg.data.dlc <= 4)
 80005b6:	d859      	bhi.n	800066c <mymain+0x158>
					const u32 tmp = mailbox.MDLR;
 80005b8:	9301      	str	r3, [sp, #4]
					std::memcpy(msg.data.buffer, &tmp, msg.data.dlc);
 80005ba:	a901      	add	r1, sp, #4
 80005bc:	a802      	add	r0, sp, #8
					std::memcpy(msg.data.buffer + 4, &tmp, msg.data.dlc - 4);
 80005be:	f000 feef 	bl	80013a0 <memcpy>
	  constexpr _Storage() noexcept : _M_empty() { }

	  template<typename... _Args>
	    constexpr
	    _Storage(in_place_t, _Args&&... __args)
	    : _M_value(std::forward<_Args>(__args)...)
 80005c2:	f89d 0010 	ldrb.w	r0, [sp, #16]
				msg.fmi = mailbox.MDTR & RegisterMap::MDTR::FMI >> RegisterMap::MDTR::shiftFMI;
 80005c6:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4

	while(true)
	{
		const auto message = can_bus.receive(Fifo::Fifo0);
		if(message && message->data.dlc >= 3) (void)can_bus.post(0x300, DataField{.buffer={(byte)'H', (byte)'E', (byte)'L', (byte)'L', (byte)'O', message->data.buffer[0], message->data.buffer[1], message->data.buffer[2]}, .dlc=8});
 80005ca:	2802      	cmp	r0, #2
				msg.time = mailbox.MDTR & RegisterMap::MDTR::TIME >> RegisterMap::MDTR::shiftTIME;
 80005cc:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 80005d0:	f89d 1008 	ldrb.w	r1, [sp, #8]
				msg.id = decode_mir(mailbox.MIR);
 80005d4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 80005d8:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80005dc:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80005e0:	d9da      	bls.n	8000598 <mymain+0x84>
 80005e2:	204f      	movs	r0, #79	; 0x4f
 80005e4:	f88d 200e 	strb.w	r2, [sp, #14]
			if(!(bxcan->TSR & (1 << (code + shift_tme))))
 80005e8:	2201      	movs	r2, #1
 80005ea:	f88d 000c 	strb.w	r0, [sp, #12]
 80005ee:	f88d 100d 	strb.w	r1, [sp, #13]
 80005f2:	f88d 300f 	strb.w	r3, [sp, #15]
			const u32 code = bxcan->TSR & RegisterMap::TSR::CODE >> RegisterMap::TSR::shiftCODE;
 80005f6:	68a3      	ldr	r3, [r4, #8]
			if(!(bxcan->TSR & (1 << (code + shift_tme))))
 80005f8:	68a1      	ldr	r1, [r4, #8]
			const u32 code = bxcan->TSR & RegisterMap::TSR::CODE >> RegisterMap::TSR::shiftCODE;
 80005fa:	f003 0303 	and.w	r3, r3, #3
			if(!(bxcan->TSR & (1 << (code + shift_tme))))
 80005fe:	f103 001a 	add.w	r0, r3, #26
 8000602:	4082      	lsls	r2, r0
 8000604:	420a      	tst	r2, r1
 8000606:	d118      	bne.n	800063a <mymain+0x126>
				if(decode_mir(bxcan->TxMailBoxes[code].MIR) > id)
 8000608:	f103 0218 	add.w	r2, r3, #24
 800060c:	0112      	lsls	r2, r2, #4
 800060e:	58a2      	ldr	r2, [r4, r2]
	};

	[[nodiscard]] inline constexpr u32 decode_mir(const u32 mir) noexcept
	{
		constexpr u32 shift_exid = 3U;
		if(mir & RegisterMap::MIR::IDE)
 8000610:	0751      	lsls	r1, r2, #29
		{
			return mir >> shift_exid;
 8000612:	bf4c      	ite	mi
 8000614:	08d2      	lsrmi	r2, r2, #3
		}
		else
		{
			return (mir & RegisterMap::MIR::STID_EXID) >> RegisterMap::MIR::shiftSTID_EXID;
 8000616:	0d52      	lsrpl	r2, r2, #21
 8000618:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800061c:	d8bc      	bhi.n	8000598 <mymain+0x84>
			BitOperation::set_bit(bxcan->TSR, RegisterMap::TSR::ABRQ0 << (1 << code));
 800061e:	2201      	movs	r2, #1
 8000620:	fa02 f103 	lsl.w	r1, r2, r3
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	408a      	lsls	r2, r1
 8000628:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
 800062c:	4311      	orrs	r1, r2
 800062e:	f8c5 1408 	str.w	r1, [r5, #1032]	; 0x408
			while(BitOperation::is_bit_clear(bxcan->TSR, RegisterMap::TSR::ABRQ0 << (1 << code)));
 8000632:	68a1      	ldr	r1, [r4, #8]
 8000634:	420a      	tst	r2, r1
 8000636:	d0fc      	beq.n	8000632 <mymain+0x11e>
			return BitOperation::is_bit_set(bxcan->TSR, RegisterMap::TSR::TXOK0 << (1 << code));
 8000638:	68a2      	ldr	r2, [r4, #8]
				bxcan->TxMailBoxes[code].MIR = encode_mir(id);
 800063a:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800063e:	011b      	lsls	r3, r3, #4
 8000640:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8000644:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
 8000648:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
				bxcan->TxMailBoxes[code].MDTR = data.dlc;
 800064c:	2108      	movs	r1, #8
					bxcan->TxMailBoxes[code].MDLR = tmp;
 800064e:	4423      	add	r3, r4
				bxcan->TxMailBoxes[code].MDTR = data.dlc;
 8000650:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
					bxcan->TxMailBoxes[code].MDLR = tmp;
 8000654:	f8c3 6188 	str.w	r6, [r3, #392]	; 0x188
					std::memcpy(&tmp, data.buffer + 4, data.dlc - 4);
 8000658:	9903      	ldr	r1, [sp, #12]
					bxcan->TxMailBoxes[code].MDHR = tmp;
 800065a:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
 800065e:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	}
 800066a:	e795      	b.n	8000598 <mymain+0x84>
					std::memcpy(msg.data.buffer, &tmp, 4);
 800066c:	9302      	str	r3, [sp, #8]
					tmp = mailbox.MDHR;
 800066e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
					std::memcpy(msg.data.buffer + 4, &tmp, msg.data.dlc - 4);
 8000672:	3a04      	subs	r2, #4
					tmp = mailbox.MDHR;
 8000674:	9301      	str	r3, [sp, #4]
					std::memcpy(msg.data.buffer + 4, &tmp, msg.data.dlc - 4);
 8000676:	a901      	add	r1, sp, #4
 8000678:	a803      	add	r0, sp, #12
 800067a:	e7a0      	b.n	80005be <mymain+0xaa>
 800067c:	080013e4 	.word	0x080013e4
 8000680:	40006400 	.word	0x40006400
 8000684:	40006000 	.word	0x40006000
 8000688:	4c4c4548 	.word	0x4c4c4548

0800068c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800068e:	490d      	ldr	r1, [pc, #52]	; (80006c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006a4:	4c0a      	ldr	r4, [pc, #40]	; (80006d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006b2:	f7ff fe9d 	bl	80003f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b6:	f000 fe4f 	bl	8001358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ba:	f7ff fe58 	bl	800036e <main>
  bx lr
 80006be:	4770      	bx	lr
  ldr r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006c8:	0800141c 	.word	0x0800141c
  ldr r2, =_sbss
 80006cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006d0:	20000054 	.word	0x20000054

080006d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC1_2_IRQHandler>
	...

080006d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <HAL_InitTick+0x3c>)
{
 80006dc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006de:	7818      	ldrb	r0, [r3, #0]
 80006e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80006e8:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <HAL_InitTick+0x40>)
 80006ea:	6810      	ldr	r0, [r2, #0]
 80006ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80006f0:	f000 fa68 	bl	8000bc4 <HAL_SYSTICK_Config>
 80006f4:	4604      	mov	r4, r0
 80006f6:	b958      	cbnz	r0, 8000710 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f8:	2d0f      	cmp	r5, #15
 80006fa:	d809      	bhi.n	8000710 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fc:	4602      	mov	r2, r0
 80006fe:	4629      	mov	r1, r5
 8000700:	f04f 30ff 	mov.w	r0, #4294967295
 8000704:	f000 fa0a 	bl	8000b1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000708:	4620      	mov	r0, r4
 800070a:	4b04      	ldr	r3, [pc, #16]	; (800071c <HAL_InitTick+0x44>)
 800070c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800070e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000710:	2001      	movs	r0, #1
 8000712:	e7fc      	b.n	800070e <HAL_InitTick+0x36>
 8000714:	20000004 	.word	0x20000004
 8000718:	20000000 	.word	0x20000000
 800071c:	20000008 	.word	0x20000008

08000720 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <HAL_Init+0x20>)
{
 8000722:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000724:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000726:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000728:	f043 0310 	orr.w	r3, r3, #16
 800072c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072e:	f000 f9e3 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	200f      	movs	r0, #15
 8000734:	f7ff ffd0 	bl	80006d8 <HAL_InitTick>
  HAL_MspInit();
 8000738:	f7ff fe28 	bl	800038c <HAL_MspInit>
}
 800073c:	2000      	movs	r0, #0
 800073e:	bd08      	pop	{r3, pc}
 8000740:	40022000 	.word	0x40022000

08000744 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000744:	4a03      	ldr	r2, [pc, #12]	; (8000754 <HAL_IncTick+0x10>)
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <HAL_IncTick+0x14>)
 8000748:	6811      	ldr	r1, [r2, #0]
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	440b      	add	r3, r1
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000050 	.word	0x20000050
 8000758:	20000004 	.word	0x20000004

0800075c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800075c:	4b01      	ldr	r3, [pc, #4]	; (8000764 <HAL_GetTick+0x8>)
 800075e:	6818      	ldr	r0, [r3, #0]
}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	20000050 	.word	0x20000050

08000768 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000768:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800076a:	4604      	mov	r4, r0
 800076c:	2800      	cmp	r0, #0
 800076e:	d06e      	beq.n	800084e <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000770:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000774:	b90b      	cbnz	r3, 800077a <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000776:	f7ff fd07 	bl	8000188 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800077a:	6822      	ldr	r2, [r4, #0]
 800077c:	6813      	ldr	r3, [r2, #0]
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000784:	f7ff ffea 	bl	800075c <HAL_GetTick>
 8000788:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800078a:	6823      	ldr	r3, [r4, #0]
 800078c:	685a      	ldr	r2, [r3, #4]
 800078e:	07d1      	lsls	r1, r2, #31
 8000790:	d551      	bpl.n	8000836 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	f022 0202 	bic.w	r2, r2, #2
 8000798:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800079a:	f7ff ffdf 	bl	800075c <HAL_GetTick>
 800079e:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007a0:	6823      	ldr	r3, [r4, #0]
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	0792      	lsls	r2, r2, #30
 80007a6:	d454      	bmi.n	8000852 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007a8:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007aa:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007ac:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	bf0c      	ite	eq
 80007b2:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007b6:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80007ba:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80007bc:	7e62      	ldrb	r2, [r4, #25]
 80007be:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	bf0c      	ite	eq
 80007c4:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007c8:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80007cc:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80007ce:	7ea2      	ldrb	r2, [r4, #26]
 80007d0:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	bf0c      	ite	eq
 80007d6:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007da:	f022 0220 	bicne.w	r2, r2, #32
 80007de:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80007e0:	7ee2      	ldrb	r2, [r4, #27]
 80007e2:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	bf0c      	ite	eq
 80007e8:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007ec:	f042 0210 	orrne.w	r2, r2, #16
 80007f0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80007f2:	7f22      	ldrb	r2, [r4, #28]
 80007f4:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	bf0c      	ite	eq
 80007fa:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007fe:	f022 0208 	bicne.w	r2, r2, #8
 8000802:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000804:	7f62      	ldrb	r2, [r4, #29]
 8000806:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	bf0c      	ite	eq
 800080c:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000810:	f022 0204 	bicne.w	r2, r2, #4
 8000814:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000816:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800081a:	430a      	orrs	r2, r1
 800081c:	6921      	ldr	r1, [r4, #16]
 800081e:	430a      	orrs	r2, r1
 8000820:	6961      	ldr	r1, [r4, #20]
 8000822:	430a      	orrs	r2, r1
 8000824:	6861      	ldr	r1, [r4, #4]
 8000826:	3901      	subs	r1, #1
 8000828:	430a      	orrs	r2, r1
 800082a:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800082c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800082e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000830:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8000834:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000836:	f7ff ff91 	bl	800075c <HAL_GetTick>
 800083a:	1b40      	subs	r0, r0, r5
 800083c:	280a      	cmp	r0, #10
 800083e:	d9a4      	bls.n	800078a <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000846:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000848:	2305      	movs	r3, #5
 800084a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800084e:	2001      	movs	r0, #1
 8000850:	e7f0      	b.n	8000834 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000852:	f7ff ff83 	bl	800075c <HAL_GetTick>
 8000856:	1b40      	subs	r0, r0, r5
 8000858:	280a      	cmp	r0, #10
 800085a:	d9a1      	bls.n	80007a0 <HAL_CAN_Init+0x38>
 800085c:	e7f0      	b.n	8000840 <HAL_CAN_Init+0xd8>

0800085e <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800085e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8000860:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8000864:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8000866:	2b02      	cmp	r3, #2
 8000868:	d122      	bne.n	80008b0 <HAL_CAN_Stop+0x52>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800086a:	6802      	ldr	r2, [r0, #0]
 800086c:	6813      	ldr	r3, [r2, #0]
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000874:	f7ff ff72 	bl	800075c <HAL_GetTick>
 8000878:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800087a:	6823      	ldr	r3, [r4, #0]
 800087c:	685a      	ldr	r2, [r3, #4]
 800087e:	07d2      	lsls	r2, r2, #31
 8000880:	d508      	bpl.n	8000894 <HAL_CAN_Stop+0x36>
        return HAL_ERROR;
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000882:	681a      	ldr	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;

    /* Return function status */
    return HAL_OK;
 8000884:	2000      	movs	r0, #0
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000886:	f022 0202 	bic.w	r2, r2, #2
 800088a:	601a      	str	r2, [r3, #0]
    hcan->State = HAL_CAN_STATE_READY;
 800088c:	2301      	movs	r3, #1
 800088e:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;

    return HAL_ERROR;
  }
}
 8000892:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000894:	f7ff ff62 	bl	800075c <HAL_GetTick>
 8000898:	1b40      	subs	r0, r0, r5
 800089a:	280a      	cmp	r0, #10
 800089c:	d9ed      	bls.n	800087a <HAL_CAN_Stop+0x1c>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800089e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a4:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80008a6:	2305      	movs	r3, #5
 80008a8:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80008ac:	2001      	movs	r0, #1
 80008ae:	e7f0      	b.n	8000892 <HAL_CAN_Stop+0x34>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80008b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80008b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008b6:	6243      	str	r3, [r0, #36]	; 0x24
 80008b8:	e7f8      	b.n	80008ac <HAL_CAN_Stop+0x4e>

080008ba <HAL_CAN_DeInit>:
{
 80008ba:	b510      	push	{r4, lr}
  if (hcan == NULL)
 80008bc:	4604      	mov	r4, r0
 80008be:	b170      	cbz	r0, 80008de <HAL_CAN_DeInit+0x24>
  (void)HAL_CAN_Stop(hcan);
 80008c0:	f7ff ffcd 	bl	800085e <HAL_CAN_Stop>
  HAL_CAN_MspDeInit(hcan);
 80008c4:	4620      	mov	r0, r4
 80008c6:	f7ff fcab 	bl	8000220 <HAL_CAN_MspDeInit>
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008ca:	2000      	movs	r0, #0
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 80008cc:	6822      	ldr	r2, [r4, #0]
 80008ce:	6813      	ldr	r3, [r2, #0]
 80008d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008d4:	6013      	str	r3, [r2, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008d6:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_RESET;
 80008d8:	f884 0020 	strb.w	r0, [r4, #32]
}
 80008dc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80008de:	2001      	movs	r0, #1
 80008e0:	e7fc      	b.n	80008dc <HAL_CAN_DeInit+0x22>

080008e2 <HAL_CAN_TxMailbox0CompleteCallback>:
 80008e2:	4770      	bx	lr

080008e4 <HAL_CAN_TxMailbox1CompleteCallback>:
 80008e4:	4770      	bx	lr

080008e6 <HAL_CAN_TxMailbox2CompleteCallback>:
 80008e6:	4770      	bx	lr

080008e8 <HAL_CAN_TxMailbox0AbortCallback>:
 80008e8:	4770      	bx	lr

080008ea <HAL_CAN_TxMailbox1AbortCallback>:
 80008ea:	4770      	bx	lr

080008ec <HAL_CAN_TxMailbox2AbortCallback>:
 80008ec:	4770      	bx	lr

080008ee <HAL_CAN_RxFifo0MsgPendingCallback>:
 80008ee:	4770      	bx	lr

080008f0 <HAL_CAN_RxFifo0FullCallback>:
 80008f0:	4770      	bx	lr

080008f2 <HAL_CAN_RxFifo1MsgPendingCallback>:
 80008f2:	4770      	bx	lr

080008f4 <HAL_CAN_RxFifo1FullCallback>:
 80008f4:	4770      	bx	lr

080008f6 <HAL_CAN_SleepCallback>:
 80008f6:	4770      	bx	lr

080008f8 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80008f8:	4770      	bx	lr

080008fa <HAL_CAN_ErrorCallback>:
 80008fa:	4770      	bx	lr

080008fc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80008fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000900:	6803      	ldr	r3, [r0, #0]
{
 8000902:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000904:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000906:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800090a:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800090e:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000910:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000914:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000918:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800091c:	d022      	beq.n	8000964 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800091e:	f017 0401 	ands.w	r4, r7, #1
 8000922:	d007      	beq.n	8000934 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000924:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000926:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000928:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800092a:	f140 80a5 	bpl.w	8000a78 <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800092e:	f7ff ffd8 	bl	80008e2 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000932:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000934:	05fb      	lsls	r3, r7, #23
 8000936:	d509      	bpl.n	800094c <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000938:	f44f 7280 	mov.w	r2, #256	; 0x100
 800093c:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800093e:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000940:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000942:	f140 80a7 	bpl.w	8000a94 <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000946:	4628      	mov	r0, r5
 8000948:	f7ff ffcc 	bl	80008e4 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800094c:	03fb      	lsls	r3, r7, #15
 800094e:	d509      	bpl.n	8000964 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000950:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000954:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000956:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000958:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800095a:	f140 80a9 	bpl.w	8000ab0 <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800095e:	4628      	mov	r0, r5
 8000960:	f7ff ffc1 	bl	80008e6 <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000964:	0733      	lsls	r3, r6, #28
 8000966:	d507      	bpl.n	8000978 <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000968:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800096c:	bf1f      	itttt	ne
 800096e:	2210      	movne	r2, #16
 8000970:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000972:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000976:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000978:	0777      	lsls	r7, r6, #29
 800097a:	d508      	bpl.n	800098e <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800097c:	f01b 0f08 	tst.w	fp, #8
 8000980:	d005      	beq.n	800098e <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000982:	2208      	movs	r2, #8
 8000984:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000986:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000988:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800098a:	f7ff ffb1 	bl	80008f0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800098e:	07b0      	lsls	r0, r6, #30
 8000990:	d506      	bpl.n	80009a0 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000992:	682b      	ldr	r3, [r5, #0]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	0799      	lsls	r1, r3, #30
 8000998:	d002      	beq.n	80009a0 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800099a:	4628      	mov	r0, r5
 800099c:	f7ff ffa7 	bl	80008ee <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80009a0:	0672      	lsls	r2, r6, #25
 80009a2:	d507      	bpl.n	80009b4 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80009a4:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80009a8:	bf1f      	itttt	ne
 80009aa:	2210      	movne	r2, #16
 80009ac:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80009ae:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80009b2:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80009b4:	06b3      	lsls	r3, r6, #26
 80009b6:	d508      	bpl.n	80009ca <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80009b8:	f01a 0f08 	tst.w	sl, #8
 80009bc:	d005      	beq.n	80009ca <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80009be:	2208      	movs	r2, #8
 80009c0:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80009c2:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80009c4:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80009c6:	f7ff ff95 	bl	80008f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80009ca:	06f7      	lsls	r7, r6, #27
 80009cc:	d506      	bpl.n	80009dc <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80009ce:	682b      	ldr	r3, [r5, #0]
 80009d0:	691b      	ldr	r3, [r3, #16]
 80009d2:	0798      	lsls	r0, r3, #30
 80009d4:	d002      	beq.n	80009dc <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80009d6:	4628      	mov	r0, r5
 80009d8:	f7ff ff8b 	bl	80008f2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80009dc:	03b1      	lsls	r1, r6, #14
 80009de:	d508      	bpl.n	80009f2 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80009e0:	f019 0f10 	tst.w	r9, #16
 80009e4:	d005      	beq.n	80009f2 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80009e6:	2210      	movs	r2, #16
 80009e8:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80009ea:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80009ec:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80009ee:	f7ff ff82 	bl	80008f6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80009f2:	03f2      	lsls	r2, r6, #15
 80009f4:	d508      	bpl.n	8000a08 <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80009f6:	f019 0f08 	tst.w	r9, #8
 80009fa:	d005      	beq.n	8000a08 <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80009fc:	2208      	movs	r2, #8
 80009fe:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000a00:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000a02:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000a04:	f7ff ff78 	bl	80008f8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000a08:	0433      	lsls	r3, r6, #16
 8000a0a:	d52c      	bpl.n	8000a66 <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000a0c:	f019 0f04 	tst.w	r9, #4
 8000a10:	682a      	ldr	r2, [r5, #0]
 8000a12:	d026      	beq.n	8000a62 <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000a14:	05f7      	lsls	r7, r6, #23
 8000a16:	d504      	bpl.n	8000a22 <HAL_CAN_IRQHandler+0x126>
 8000a18:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000a1c:	bf18      	it	ne
 8000a1e:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000a22:	05b0      	lsls	r0, r6, #22
 8000a24:	d504      	bpl.n	8000a30 <HAL_CAN_IRQHandler+0x134>
 8000a26:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000a2a:	bf18      	it	ne
 8000a2c:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000a30:	0571      	lsls	r1, r6, #21
 8000a32:	d504      	bpl.n	8000a3e <HAL_CAN_IRQHandler+0x142>
 8000a34:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000a38:	bf18      	it	ne
 8000a3a:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000a3e:	0533      	lsls	r3, r6, #20
 8000a40:	d50f      	bpl.n	8000a62 <HAL_CAN_IRQHandler+0x166>
 8000a42:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000a46:	d00c      	beq.n	8000a62 <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8000a48:	2b40      	cmp	r3, #64	; 0x40
 8000a4a:	d04f      	beq.n	8000aec <HAL_CAN_IRQHandler+0x1f0>
 8000a4c:	d83e      	bhi.n	8000acc <HAL_CAN_IRQHandler+0x1d0>
 8000a4e:	2b20      	cmp	r3, #32
 8000a50:	d046      	beq.n	8000ae0 <HAL_CAN_IRQHandler+0x1e4>
 8000a52:	2b30      	cmp	r3, #48	; 0x30
 8000a54:	d047      	beq.n	8000ae6 <HAL_CAN_IRQHandler+0x1ea>
 8000a56:	2b10      	cmp	r3, #16
 8000a58:	d03f      	beq.n	8000ada <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000a5a:	6993      	ldr	r3, [r2, #24]
 8000a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a60:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000a62:	2304      	movs	r3, #4
 8000a64:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000a66:	b12c      	cbz	r4, 8000a74 <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000a68:	6a6b      	ldr	r3, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000a6a:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8000a6c:	431c      	orrs	r4, r3
 8000a6e:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000a70:	f7ff ff43 	bl	80008fa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000a74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000a78:	077a      	lsls	r2, r7, #29
 8000a7a:	d405      	bmi.n	8000a88 <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000a7c:	f017 0408 	ands.w	r4, r7, #8
 8000a80:	d105      	bne.n	8000a8e <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000a82:	f7ff ff31 	bl	80008e8 <HAL_CAN_TxMailbox0AbortCallback>
 8000a86:	e755      	b.n	8000934 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000a88:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000a8c:	e752      	b.n	8000934 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000a8e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000a92:	e74f      	b.n	8000934 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000a94:	0579      	lsls	r1, r7, #21
 8000a96:	d502      	bpl.n	8000a9e <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000a98:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000a9c:	e756      	b.n	800094c <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000a9e:	053a      	lsls	r2, r7, #20
 8000aa0:	d502      	bpl.n	8000aa8 <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000aa2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000aa6:	e751      	b.n	800094c <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	f7ff ff1e 	bl	80008ea <HAL_CAN_TxMailbox1AbortCallback>
 8000aae:	e74d      	b.n	800094c <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000ab0:	0379      	lsls	r1, r7, #13
 8000ab2:	d502      	bpl.n	8000aba <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000ab4:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000ab8:	e754      	b.n	8000964 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000aba:	033a      	lsls	r2, r7, #12
 8000abc:	d502      	bpl.n	8000ac4 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000abe:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000ac2:	e74f      	b.n	8000964 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000ac4:	4628      	mov	r0, r5
 8000ac6:	f7ff ff11 	bl	80008ec <HAL_CAN_TxMailbox2AbortCallback>
 8000aca:	e74b      	b.n	8000964 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000acc:	2b50      	cmp	r3, #80	; 0x50
 8000ace:	d010      	beq.n	8000af2 <HAL_CAN_IRQHandler+0x1f6>
 8000ad0:	2b60      	cmp	r3, #96	; 0x60
 8000ad2:	d1c2      	bne.n	8000a5a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000ad4:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000ad8:	e7bf      	b.n	8000a5a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 8000ada:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000ade:	e7bc      	b.n	8000a5a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000ae0:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000ae4:	e7b9      	b.n	8000a5a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000ae6:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000aea:	e7b6      	b.n	8000a5a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 8000aec:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000af0:	e7b3      	b.n	8000a5a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 8000af2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000af6:	e7b0      	b.n	8000a5a <HAL_CAN_IRQHandler+0x15e>

08000af8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4907      	ldr	r1, [pc, #28]	; (8000b18 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000afa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000afe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000b06:	0412      	lsls	r2, r2, #16
 8000b08:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000b14:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1e:	b530      	push	{r4, r5, lr}
 8000b20:	68dc      	ldr	r4, [r3, #12]
 8000b22:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b26:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	bf28      	it	cs
 8000b30:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b32:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b38:	bf98      	it	ls
 8000b3a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b40:	bf88      	it	hi
 8000b42:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	ea21 0303 	bic.w	r3, r1, r3
 8000b48:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4a:	fa05 f404 	lsl.w	r4, r5, r4
 8000b4e:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000b52:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	bfac      	ite	ge
 8000b5a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	4a07      	ldrlt	r2, [pc, #28]	; (8000b7c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	bfab      	itete	ge
 8000b68:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b70:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b76:	bd30      	pop	{r4, r5, pc}
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	e000ed14 	.word	0xe000ed14

08000b80 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b80:	2800      	cmp	r0, #0
 8000b82:	db08      	blt.n	8000b96 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b84:	2301      	movs	r3, #1
 8000b86:	0942      	lsrs	r2, r0, #5
 8000b88:	f000 001f 	and.w	r0, r0, #31
 8000b8c:	fa03 f000 	lsl.w	r0, r3, r0
 8000b90:	4b01      	ldr	r3, [pc, #4]	; (8000b98 <HAL_NVIC_EnableIRQ+0x18>)
 8000b92:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b96:	4770      	bx	lr
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	db0d      	blt.n	8000bbc <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	0943      	lsrs	r3, r0, #5
 8000ba4:	f000 001f 	and.w	r0, r0, #31
 8000ba8:	fa02 f000 	lsl.w	r0, r2, r0
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_NVIC_DisableIRQ+0x24>)
 8000bae:	3320      	adds	r3, #32
 8000bb0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bb8:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000e100 	.word	0xe000e100

08000bc4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	3801      	subs	r0, #1
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d20b      	bcs.n	8000be4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bcc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	21f0      	movs	r1, #240	; 0xf0
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bda:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bdc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bde:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000be4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bf0:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000bf2:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf4:	4f61      	ldr	r7, [pc, #388]	; (8000d7c <HAL_GPIO_Init+0x190>)
 8000bf6:	4b62      	ldr	r3, [pc, #392]	; (8000d80 <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 8000bf8:	f8df c188 	ldr.w	ip, [pc, #392]	; 8000d84 <HAL_GPIO_Init+0x198>
 8000bfc:	f8df e188 	ldr.w	lr, [pc, #392]	; 8000d88 <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c00:	680d      	ldr	r5, [r1, #0]
 8000c02:	fa35 f406 	lsrs.w	r4, r5, r6
 8000c06:	d102      	bne.n	8000c0e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8000c08:	b003      	add	sp, #12
 8000c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000c0e:	f04f 0801 	mov.w	r8, #1
 8000c12:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c16:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8000c1a:	ea38 0505 	bics.w	r5, r8, r5
 8000c1e:	d177      	bne.n	8000d10 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000c20:	684d      	ldr	r5, [r1, #4]
 8000c22:	2d03      	cmp	r5, #3
 8000c24:	d807      	bhi.n	8000c36 <HAL_GPIO_Init+0x4a>
 8000c26:	3d01      	subs	r5, #1
 8000c28:	2d02      	cmp	r5, #2
 8000c2a:	f200 8082 	bhi.w	8000d32 <HAL_GPIO_Init+0x146>
 8000c2e:	e8df f005 	tbb	[pc, r5]
 8000c32:	9792      	.short	0x9792
 8000c34:	9d          	.byte	0x9d
 8000c35:	00          	.byte	0x00
 8000c36:	2d12      	cmp	r5, #18
 8000c38:	f000 8095 	beq.w	8000d66 <HAL_GPIO_Init+0x17a>
 8000c3c:	d86a      	bhi.n	8000d14 <HAL_GPIO_Init+0x128>
 8000c3e:	2d11      	cmp	r5, #17
 8000c40:	f000 808b 	beq.w	8000d5a <HAL_GPIO_Init+0x16e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c44:	2cff      	cmp	r4, #255	; 0xff
 8000c46:	bf98      	it	ls
 8000c48:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c4a:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c4e:	bf88      	it	hi
 8000c50:	f100 0a04 	addhi.w	sl, r0, #4
 8000c54:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c58:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c5c:	bf88      	it	hi
 8000c5e:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c60:	fa09 fb05 	lsl.w	fp, r9, r5
 8000c64:	ea28 080b 	bic.w	r8, r8, fp
 8000c68:	fa02 f505 	lsl.w	r5, r2, r5
 8000c6c:	ea48 0505 	orr.w	r5, r8, r5
 8000c70:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c74:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000c78:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000c7c:	d048      	beq.n	8000d10 <HAL_GPIO_Init+0x124>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c7e:	69bd      	ldr	r5, [r7, #24]
 8000c80:	f026 0803 	bic.w	r8, r6, #3
 8000c84:	f045 0501 	orr.w	r5, r5, #1
 8000c88:	61bd      	str	r5, [r7, #24]
 8000c8a:	69bd      	ldr	r5, [r7, #24]
 8000c8c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000c90:	f005 0501 	and.w	r5, r5, #1
 8000c94:	9501      	str	r5, [sp, #4]
 8000c96:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c9a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c9e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ca0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000ca4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ca8:	fa09 f90b 	lsl.w	r9, r9, fp
 8000cac:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cb0:	4d36      	ldr	r5, [pc, #216]	; (8000d8c <HAL_GPIO_Init+0x1a0>)
 8000cb2:	42a8      	cmp	r0, r5
 8000cb4:	d05e      	beq.n	8000d74 <HAL_GPIO_Init+0x188>
 8000cb6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cba:	42a8      	cmp	r0, r5
 8000cbc:	d05c      	beq.n	8000d78 <HAL_GPIO_Init+0x18c>
 8000cbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cc2:	42a8      	cmp	r0, r5
 8000cc4:	bf0c      	ite	eq
 8000cc6:	2502      	moveq	r5, #2
 8000cc8:	2503      	movne	r5, #3
 8000cca:	fa05 f50b 	lsl.w	r5, r5, fp
 8000cce:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000cd2:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000cd6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000cdc:	bf14      	ite	ne
 8000cde:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ce0:	43a5      	biceq	r5, r4
 8000ce2:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000ce4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000cea:	bf14      	ite	ne
 8000cec:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cee:	43a5      	biceq	r5, r4
 8000cf0:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cf2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cf8:	bf14      	ite	ne
 8000cfa:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cfc:	43a5      	biceq	r5, r4
 8000cfe:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d00:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d02:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d06:	bf14      	ite	ne
 8000d08:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d0a:	ea25 0404 	biceq.w	r4, r5, r4
 8000d0e:	60dc      	str	r4, [r3, #12]
	position++;
 8000d10:	3601      	adds	r6, #1
 8000d12:	e775      	b.n	8000c00 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8000d14:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000d90 <HAL_GPIO_Init+0x1a4>
 8000d18:	454d      	cmp	r5, r9
 8000d1a:	d00a      	beq.n	8000d32 <HAL_GPIO_Init+0x146>
 8000d1c:	d815      	bhi.n	8000d4a <HAL_GPIO_Init+0x15e>
 8000d1e:	4575      	cmp	r5, lr
 8000d20:	d007      	beq.n	8000d32 <HAL_GPIO_Init+0x146>
 8000d22:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 8000d26:	454d      	cmp	r5, r9
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x146>
 8000d2a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000d2e:	454d      	cmp	r5, r9
 8000d30:	d188      	bne.n	8000c44 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d32:	688a      	ldr	r2, [r1, #8]
 8000d34:	b1e2      	cbz	r2, 8000d70 <HAL_GPIO_Init+0x184>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d36:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000d38:	bf08      	it	eq
 8000d3a:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d3e:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000d42:	bf18      	it	ne
 8000d44:	f8c0 8014 	strne.w	r8, [r0, #20]
 8000d48:	e77c      	b.n	8000c44 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8000d4a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8000d94 <HAL_GPIO_Init+0x1a8>
 8000d4e:	454d      	cmp	r5, r9
 8000d50:	d0ef      	beq.n	8000d32 <HAL_GPIO_Init+0x146>
 8000d52:	4565      	cmp	r5, ip
 8000d54:	e7ec      	b.n	8000d30 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d56:	68ca      	ldr	r2, [r1, #12]
          break;
 8000d58:	e774      	b.n	8000c44 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d5a:	68ca      	ldr	r2, [r1, #12]
 8000d5c:	3204      	adds	r2, #4
          break;
 8000d5e:	e771      	b.n	8000c44 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d60:	68ca      	ldr	r2, [r1, #12]
 8000d62:	3208      	adds	r2, #8
          break;
 8000d64:	e76e      	b.n	8000c44 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d66:	68ca      	ldr	r2, [r1, #12]
 8000d68:	320c      	adds	r2, #12
          break;
 8000d6a:	e76b      	b.n	8000c44 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	e769      	b.n	8000c44 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d70:	2204      	movs	r2, #4
 8000d72:	e767      	b.n	8000c44 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d74:	2500      	movs	r5, #0
 8000d76:	e7a8      	b.n	8000cca <HAL_GPIO_Init+0xde>
 8000d78:	2501      	movs	r5, #1
 8000d7a:	e7a6      	b.n	8000cca <HAL_GPIO_Init+0xde>
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010400 	.word	0x40010400
 8000d84:	10320000 	.word	0x10320000
 8000d88:	10120000 	.word	0x10120000
 8000d8c:	40010800 	.word	0x40010800
 8000d90:	10220000 	.word	0x10220000
 8000d94:	10310000 	.word	0x10310000

08000d98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000d98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000d9c:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8000da0:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000da2:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000da6:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000daa:	eb00 030b 	add.w	r3, r0, fp
 8000dae:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <HAL_GPIO_DeInit+0xc8>)
  while ((GPIO_Pin >> position) != 0u)
 8000db2:	fa31 f402 	lsrs.w	r4, r1, r2
 8000db6:	d102      	bne.n	8000dbe <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8000db8:	b003      	add	sp, #12
 8000dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000dbe:	fa0a f602 	lsl.w	r6, sl, r2
    if (iocurrent)
 8000dc2:	400e      	ands	r6, r1
 8000dc4:	d045      	beq.n	8000e52 <HAL_GPIO_DeInit+0xba>
      tmp = AFIO->EXTICR[position >> 2u];
 8000dc6:	f022 0403 	bic.w	r4, r2, #3
 8000dca:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000dce:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000dd2:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8000dd6:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000dd8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000ddc:	fa08 f90c 	lsl.w	r9, r8, ip
 8000de0:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000de4:	4d1f      	ldr	r5, [pc, #124]	; (8000e64 <HAL_GPIO_DeInit+0xcc>)
 8000de6:	42a8      	cmp	r0, r5
 8000de8:	d035      	beq.n	8000e56 <HAL_GPIO_DeInit+0xbe>
 8000dea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dee:	42a8      	cmp	r0, r5
 8000df0:	d033      	beq.n	8000e5a <HAL_GPIO_DeInit+0xc2>
 8000df2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000df6:	42a8      	cmp	r0, r5
 8000df8:	bf0c      	ite	eq
 8000dfa:	2702      	moveq	r7, #2
 8000dfc:	2703      	movne	r7, #3
 8000dfe:	fa07 f70c 	lsl.w	r7, r7, ip
 8000e02:	4577      	cmp	r7, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000e04:	ea6f 0506 	mvn.w	r5, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000e08:	d10f      	bne.n	8000e2a <HAL_GPIO_DeInit+0x92>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8000e0a:	68a7      	ldr	r7, [r4, #8]
 8000e0c:	ea27 0709 	bic.w	r7, r7, r9
 8000e10:	60a7      	str	r7, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000e12:	681c      	ldr	r4, [r3, #0]
 8000e14:	402c      	ands	r4, r5
 8000e16:	601c      	str	r4, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8000e18:	685c      	ldr	r4, [r3, #4]
 8000e1a:	402c      	ands	r4, r5
 8000e1c:	605c      	str	r4, [r3, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8000e1e:	689c      	ldr	r4, [r3, #8]
 8000e20:	402c      	ands	r4, r5
 8000e22:	609c      	str	r4, [r3, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8000e24:	68dc      	ldr	r4, [r3, #12]
 8000e26:	402c      	ands	r4, r5
 8000e28:	60dc      	str	r4, [r3, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e2a:	2eff      	cmp	r6, #255	; 0xff
 8000e2c:	bf94      	ite	ls
 8000e2e:	4607      	movls	r7, r0
 8000e30:	9f01      	ldrhi	r7, [sp, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e32:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000e36:	683e      	ldr	r6, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e38:	bf88      	it	hi
 8000e3a:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000e3c:	fa08 fc04 	lsl.w	ip, r8, r4
 8000e40:	ea26 060c 	bic.w	r6, r6, ip
 8000e44:	fa0b f404 	lsl.w	r4, fp, r4
 8000e48:	4326      	orrs	r6, r4
 8000e4a:	603e      	str	r6, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8000e4c:	68c4      	ldr	r4, [r0, #12]
 8000e4e:	4025      	ands	r5, r4
 8000e50:	60c5      	str	r5, [r0, #12]
    position++;
 8000e52:	3201      	adds	r2, #1
 8000e54:	e7ad      	b.n	8000db2 <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000e56:	2700      	movs	r7, #0
 8000e58:	e7d1      	b.n	8000dfe <HAL_GPIO_DeInit+0x66>
 8000e5a:	2701      	movs	r7, #1
 8000e5c:	e7cf      	b.n	8000dfe <HAL_GPIO_DeInit+0x66>
 8000e5e:	bf00      	nop
 8000e60:	40010400 	.word	0x40010400
 8000e64:	40010800 	.word	0x40010800

08000e68 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e68:	b10a      	cbz	r2, 8000e6e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e6a:	6101      	str	r1, [r0, #16]
  }
}
 8000e6c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e6e:	0409      	lsls	r1, r1, #16
 8000e70:	e7fb      	b.n	8000e6a <HAL_GPIO_WritePin+0x2>
	...

08000e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e78:	4605      	mov	r5, r0
 8000e7a:	b338      	cbz	r0, 8000ecc <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e7c:	6803      	ldr	r3, [r0, #0]
 8000e7e:	07db      	lsls	r3, r3, #31
 8000e80:	d410      	bmi.n	8000ea4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e82:	682b      	ldr	r3, [r5, #0]
 8000e84:	079f      	lsls	r7, r3, #30
 8000e86:	d45e      	bmi.n	8000f46 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	0719      	lsls	r1, r3, #28
 8000e8c:	f100 8095 	bmi.w	8000fba <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e90:	682b      	ldr	r3, [r5, #0]
 8000e92:	075a      	lsls	r2, r3, #29
 8000e94:	f100 80c1 	bmi.w	800101a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e98:	69e8      	ldr	r0, [r5, #28]
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	f040 812c 	bne.w	80010f8 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	e029      	b.n	8000ef8 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ea4:	4c90      	ldr	r4, [pc, #576]	; (80010e8 <HAL_RCC_OscConfig+0x274>)
 8000ea6:	6863      	ldr	r3, [r4, #4]
 8000ea8:	f003 030c 	and.w	r3, r3, #12
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d007      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb0:	6863      	ldr	r3, [r4, #4]
 8000eb2:	f003 030c 	and.w	r3, r3, #12
 8000eb6:	2b08      	cmp	r3, #8
 8000eb8:	d10a      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x5c>
 8000eba:	6863      	ldr	r3, [r4, #4]
 8000ebc:	03de      	lsls	r6, r3, #15
 8000ebe:	d507      	bpl.n	8000ed0 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	039c      	lsls	r4, r3, #14
 8000ec4:	d5dd      	bpl.n	8000e82 <HAL_RCC_OscConfig+0xe>
 8000ec6:	686b      	ldr	r3, [r5, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1da      	bne.n	8000e82 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000ecc:	2001      	movs	r0, #1
 8000ece:	e013      	b.n	8000ef8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed0:	686b      	ldr	r3, [r5, #4]
 8000ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed6:	d112      	bne.n	8000efe <HAL_RCC_OscConfig+0x8a>
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ede:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fc3c 	bl	800075c <HAL_GetTick>
 8000ee4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	0398      	lsls	r0, r3, #14
 8000eea:	d4ca      	bmi.n	8000e82 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eec:	f7ff fc36 	bl	800075c <HAL_GetTick>
 8000ef0:	1b80      	subs	r0, r0, r6
 8000ef2:	2864      	cmp	r0, #100	; 0x64
 8000ef4:	d9f7      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8000ef6:	2003      	movs	r0, #3
}
 8000ef8:	b002      	add	sp, #8
 8000efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efe:	b99b      	cbnz	r3, 8000f28 <HAL_RCC_OscConfig+0xb4>
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f06:	6023      	str	r3, [r4, #0]
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f10:	f7ff fc24 	bl	800075c <HAL_GetTick>
 8000f14:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	0399      	lsls	r1, r3, #14
 8000f1a:	d5b2      	bpl.n	8000e82 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f1c:	f7ff fc1e 	bl	800075c <HAL_GetTick>
 8000f20:	1b80      	subs	r0, r0, r6
 8000f22:	2864      	cmp	r0, #100	; 0x64
 8000f24:	d9f7      	bls.n	8000f16 <HAL_RCC_OscConfig+0xa2>
 8000f26:	e7e6      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	d103      	bne.n	8000f38 <HAL_RCC_OscConfig+0xc4>
 8000f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f34:	6023      	str	r3, [r4, #0]
 8000f36:	e7cf      	b.n	8000ed8 <HAL_RCC_OscConfig+0x64>
 8000f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3c:	6023      	str	r3, [r4, #0]
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f44:	e7cb      	b.n	8000ede <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f46:	4c68      	ldr	r4, [pc, #416]	; (80010e8 <HAL_RCC_OscConfig+0x274>)
 8000f48:	6863      	ldr	r3, [r4, #4]
 8000f4a:	f013 0f0c 	tst.w	r3, #12
 8000f4e:	d007      	beq.n	8000f60 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f50:	6863      	ldr	r3, [r4, #4]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	2b08      	cmp	r3, #8
 8000f58:	d110      	bne.n	8000f7c <HAL_RCC_OscConfig+0x108>
 8000f5a:	6863      	ldr	r3, [r4, #4]
 8000f5c:	03da      	lsls	r2, r3, #15
 8000f5e:	d40d      	bmi.n	8000f7c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	079b      	lsls	r3, r3, #30
 8000f64:	d502      	bpl.n	8000f6c <HAL_RCC_OscConfig+0xf8>
 8000f66:	692b      	ldr	r3, [r5, #16]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d1af      	bne.n	8000ecc <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	696a      	ldr	r2, [r5, #20]
 8000f70:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f74:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f78:	6023      	str	r3, [r4, #0]
 8000f7a:	e785      	b.n	8000e88 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f7c:	692a      	ldr	r2, [r5, #16]
 8000f7e:	4b5b      	ldr	r3, [pc, #364]	; (80010ec <HAL_RCC_OscConfig+0x278>)
 8000f80:	b16a      	cbz	r2, 8000f9e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f86:	f7ff fbe9 	bl	800075c <HAL_GetTick>
 8000f8a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	079f      	lsls	r7, r3, #30
 8000f90:	d4ec      	bmi.n	8000f6c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f92:	f7ff fbe3 	bl	800075c <HAL_GetTick>
 8000f96:	1b80      	subs	r0, r0, r6
 8000f98:	2802      	cmp	r0, #2
 8000f9a:	d9f7      	bls.n	8000f8c <HAL_RCC_OscConfig+0x118>
 8000f9c:	e7ab      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8000f9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fbdc 	bl	800075c <HAL_GetTick>
 8000fa4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	0798      	lsls	r0, r3, #30
 8000faa:	f57f af6d 	bpl.w	8000e88 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fae:	f7ff fbd5 	bl	800075c <HAL_GetTick>
 8000fb2:	1b80      	subs	r0, r0, r6
 8000fb4:	2802      	cmp	r0, #2
 8000fb6:	d9f6      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x132>
 8000fb8:	e79d      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fba:	69aa      	ldr	r2, [r5, #24]
 8000fbc:	4e4a      	ldr	r6, [pc, #296]	; (80010e8 <HAL_RCC_OscConfig+0x274>)
 8000fbe:	4b4b      	ldr	r3, [pc, #300]	; (80010ec <HAL_RCC_OscConfig+0x278>)
 8000fc0:	b1e2      	cbz	r2, 8000ffc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000fc8:	f7ff fbc8 	bl	800075c <HAL_GetTick>
 8000fcc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000fd0:	079b      	lsls	r3, r3, #30
 8000fd2:	d50d      	bpl.n	8000ff0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fd4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000fd8:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <HAL_RCC_OscConfig+0x27c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fe0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000fe2:	bf00      	nop
  }
  while (Delay --);
 8000fe4:	9b01      	ldr	r3, [sp, #4]
 8000fe6:	1e5a      	subs	r2, r3, #1
 8000fe8:	9201      	str	r2, [sp, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f9      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x16e>
 8000fee:	e74f      	b.n	8000e90 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ff0:	f7ff fbb4 	bl	800075c <HAL_GetTick>
 8000ff4:	1b00      	subs	r0, r0, r4
 8000ff6:	2802      	cmp	r0, #2
 8000ff8:	d9e9      	bls.n	8000fce <HAL_RCC_OscConfig+0x15a>
 8000ffa:	e77c      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8000ffc:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001000:	f7ff fbac 	bl	800075c <HAL_GetTick>
 8001004:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001006:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001008:	079f      	lsls	r7, r3, #30
 800100a:	f57f af41 	bpl.w	8000e90 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800100e:	f7ff fba5 	bl	800075c <HAL_GetTick>
 8001012:	1b00      	subs	r0, r0, r4
 8001014:	2802      	cmp	r0, #2
 8001016:	d9f6      	bls.n	8001006 <HAL_RCC_OscConfig+0x192>
 8001018:	e76d      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800101a:	4c33      	ldr	r4, [pc, #204]	; (80010e8 <HAL_RCC_OscConfig+0x274>)
 800101c:	69e3      	ldr	r3, [r4, #28]
 800101e:	00d8      	lsls	r0, r3, #3
 8001020:	d424      	bmi.n	800106c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001022:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001024:	69e3      	ldr	r3, [r4, #28]
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102a:	61e3      	str	r3, [r4, #28]
 800102c:	69e3      	ldr	r3, [r4, #28]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001036:	4e2f      	ldr	r6, [pc, #188]	; (80010f4 <HAL_RCC_OscConfig+0x280>)
 8001038:	6833      	ldr	r3, [r6, #0]
 800103a:	05d9      	lsls	r1, r3, #23
 800103c:	d518      	bpl.n	8001070 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800103e:	68eb      	ldr	r3, [r5, #12]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d126      	bne.n	8001092 <HAL_RCC_OscConfig+0x21e>
 8001044:	6a23      	ldr	r3, [r4, #32]
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800104c:	f7ff fb86 	bl	800075c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001050:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001054:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001056:	6a23      	ldr	r3, [r4, #32]
 8001058:	079b      	lsls	r3, r3, #30
 800105a:	d53f      	bpl.n	80010dc <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 800105c:	2f00      	cmp	r7, #0
 800105e:	f43f af1b 	beq.w	8000e98 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001062:	69e3      	ldr	r3, [r4, #28]
 8001064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001068:	61e3      	str	r3, [r4, #28]
 800106a:	e715      	b.n	8000e98 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800106c:	2700      	movs	r7, #0
 800106e:	e7e2      	b.n	8001036 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001070:	6833      	ldr	r3, [r6, #0]
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001078:	f7ff fb70 	bl	800075c <HAL_GetTick>
 800107c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107e:	6833      	ldr	r3, [r6, #0]
 8001080:	05da      	lsls	r2, r3, #23
 8001082:	d4dc      	bmi.n	800103e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001084:	f7ff fb6a 	bl	800075c <HAL_GetTick>
 8001088:	eba0 0008 	sub.w	r0, r0, r8
 800108c:	2864      	cmp	r0, #100	; 0x64
 800108e:	d9f6      	bls.n	800107e <HAL_RCC_OscConfig+0x20a>
 8001090:	e731      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001092:	b9ab      	cbnz	r3, 80010c0 <HAL_RCC_OscConfig+0x24c>
 8001094:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001096:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800109a:	f023 0301 	bic.w	r3, r3, #1
 800109e:	6223      	str	r3, [r4, #32]
 80010a0:	6a23      	ldr	r3, [r4, #32]
 80010a2:	f023 0304 	bic.w	r3, r3, #4
 80010a6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80010a8:	f7ff fb58 	bl	800075c <HAL_GetTick>
 80010ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ae:	6a23      	ldr	r3, [r4, #32]
 80010b0:	0798      	lsls	r0, r3, #30
 80010b2:	d5d3      	bpl.n	800105c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010b4:	f7ff fb52 	bl	800075c <HAL_GetTick>
 80010b8:	1b80      	subs	r0, r0, r6
 80010ba:	4540      	cmp	r0, r8
 80010bc:	d9f7      	bls.n	80010ae <HAL_RCC_OscConfig+0x23a>
 80010be:	e71a      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	6a23      	ldr	r3, [r4, #32]
 80010c4:	d103      	bne.n	80010ce <HAL_RCC_OscConfig+0x25a>
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	6223      	str	r3, [r4, #32]
 80010cc:	e7ba      	b.n	8001044 <HAL_RCC_OscConfig+0x1d0>
 80010ce:	f023 0301 	bic.w	r3, r3, #1
 80010d2:	6223      	str	r3, [r4, #32]
 80010d4:	6a23      	ldr	r3, [r4, #32]
 80010d6:	f023 0304 	bic.w	r3, r3, #4
 80010da:	e7b6      	b.n	800104a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010dc:	f7ff fb3e 	bl	800075c <HAL_GetTick>
 80010e0:	1b80      	subs	r0, r0, r6
 80010e2:	4540      	cmp	r0, r8
 80010e4:	d9b7      	bls.n	8001056 <HAL_RCC_OscConfig+0x1e2>
 80010e6:	e706      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
 80010e8:	40021000 	.word	0x40021000
 80010ec:	42420000 	.word	0x42420000
 80010f0:	20000000 	.word	0x20000000
 80010f4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010f8:	4c2a      	ldr	r4, [pc, #168]	; (80011a4 <HAL_RCC_OscConfig+0x330>)
 80010fa:	6863      	ldr	r3, [r4, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b08      	cmp	r3, #8
 8001102:	d03e      	beq.n	8001182 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001104:	2200      	movs	r2, #0
 8001106:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <HAL_RCC_OscConfig+0x334>)
 8001108:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800110a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800110c:	d12c      	bne.n	8001168 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800110e:	f7ff fb25 	bl	800075c <HAL_GetTick>
 8001112:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	0199      	lsls	r1, r3, #6
 8001118:	d420      	bmi.n	800115c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800111a:	6a2b      	ldr	r3, [r5, #32]
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001120:	d105      	bne.n	800112e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001122:	6862      	ldr	r2, [r4, #4]
 8001124:	68a9      	ldr	r1, [r5, #8]
 8001126:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800112a:	430a      	orrs	r2, r1
 800112c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800112e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001130:	6862      	ldr	r2, [r4, #4]
 8001132:	430b      	orrs	r3, r1
 8001134:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001138:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800113a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800113c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <HAL_RCC_OscConfig+0x334>)
 8001140:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001142:	f7ff fb0b 	bl	800075c <HAL_GetTick>
 8001146:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	019a      	lsls	r2, r3, #6
 800114c:	f53f aea8 	bmi.w	8000ea0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001150:	f7ff fb04 	bl	800075c <HAL_GetTick>
 8001154:	1b40      	subs	r0, r0, r5
 8001156:	2802      	cmp	r0, #2
 8001158:	d9f6      	bls.n	8001148 <HAL_RCC_OscConfig+0x2d4>
 800115a:	e6cc      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115c:	f7ff fafe 	bl	800075c <HAL_GetTick>
 8001160:	1b80      	subs	r0, r0, r6
 8001162:	2802      	cmp	r0, #2
 8001164:	d9d6      	bls.n	8001114 <HAL_RCC_OscConfig+0x2a0>
 8001166:	e6c6      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001168:	f7ff faf8 	bl	800075c <HAL_GetTick>
 800116c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	019b      	lsls	r3, r3, #6
 8001172:	f57f ae95 	bpl.w	8000ea0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001176:	f7ff faf1 	bl	800075c <HAL_GetTick>
 800117a:	1b40      	subs	r0, r0, r5
 800117c:	2802      	cmp	r0, #2
 800117e:	d9f6      	bls.n	800116e <HAL_RCC_OscConfig+0x2fa>
 8001180:	e6b9      	b.n	8000ef6 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001182:	2801      	cmp	r0, #1
 8001184:	f43f aeb8 	beq.w	8000ef8 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001188:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118a:	6a2a      	ldr	r2, [r5, #32]
 800118c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001190:	4291      	cmp	r1, r2
 8001192:	f47f ae9b 	bne.w	8000ecc <HAL_RCC_OscConfig+0x58>
 8001196:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001198:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119c:	4293      	cmp	r3, r2
 800119e:	f43f ae7f 	beq.w	8000ea0 <HAL_RCC_OscConfig+0x2c>
 80011a2:	e693      	b.n	8000ecc <HAL_RCC_OscConfig+0x58>
 80011a4:	40021000 	.word	0x40021000
 80011a8:	42420000 	.word	0x42420000

080011ac <HAL_RCC_GetSysClockFreq>:
{
 80011ac:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80011b0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011b2:	ac02      	add	r4, sp, #8
 80011b4:	f103 0510 	add.w	r5, r3, #16
 80011b8:	4622      	mov	r2, r4
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	6859      	ldr	r1, [r3, #4]
 80011be:	3308      	adds	r3, #8
 80011c0:	c203      	stmia	r2!, {r0, r1}
 80011c2:	42ab      	cmp	r3, r5
 80011c4:	4614      	mov	r4, r2
 80011c6:	d1f7      	bne.n	80011b8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011c8:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80011cc:	4911      	ldr	r1, [pc, #68]	; (8001214 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011ce:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80011d2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80011d4:	f003 020c 	and.w	r2, r3, #12
 80011d8:	2a08      	cmp	r2, #8
 80011da:	d117      	bne.n	800120c <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011dc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80011e0:	3218      	adds	r2, #24
 80011e2:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011e4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011e6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011ea:	d50c      	bpl.n	8001206 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011ec:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011f0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011f4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011f6:	3318      	adds	r3, #24
 80011f8:	446b      	add	r3, sp
 80011fa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011fe:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001202:	b007      	add	sp, #28
 8001204:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_RCC_GetSysClockFreq+0x70>)
 8001208:	4358      	muls	r0, r3
 800120a:	e7fa      	b.n	8001202 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800120e:	e7f8      	b.n	8001202 <HAL_RCC_GetSysClockFreq+0x56>
 8001210:	08001400 	.word	0x08001400
 8001214:	40021000 	.word	0x40021000
 8001218:	007a1200 	.word	0x007a1200
 800121c:	003d0900 	.word	0x003d0900

08001220 <HAL_RCC_ClockConfig>:
{
 8001220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001224:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001226:	4604      	mov	r4, r0
 8001228:	b910      	cbnz	r0, 8001230 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800122a:	2001      	movs	r0, #1
}
 800122c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001230:	4a44      	ldr	r2, [pc, #272]	; (8001344 <HAL_RCC_ClockConfig+0x124>)
 8001232:	6813      	ldr	r3, [r2, #0]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	428b      	cmp	r3, r1
 800123a:	d328      	bcc.n	800128e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800123c:	6821      	ldr	r1, [r4, #0]
 800123e:	078e      	lsls	r6, r1, #30
 8001240:	d430      	bmi.n	80012a4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001242:	07ca      	lsls	r2, r1, #31
 8001244:	d443      	bmi.n	80012ce <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001246:	4a3f      	ldr	r2, [pc, #252]	; (8001344 <HAL_RCC_ClockConfig+0x124>)
 8001248:	6813      	ldr	r3, [r2, #0]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	42ab      	cmp	r3, r5
 8001250:	d865      	bhi.n	800131e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001252:	6822      	ldr	r2, [r4, #0]
 8001254:	4d3c      	ldr	r5, [pc, #240]	; (8001348 <HAL_RCC_ClockConfig+0x128>)
 8001256:	f012 0f04 	tst.w	r2, #4
 800125a:	d16c      	bne.n	8001336 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125c:	0713      	lsls	r3, r2, #28
 800125e:	d506      	bpl.n	800126e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001260:	686b      	ldr	r3, [r5, #4]
 8001262:	6922      	ldr	r2, [r4, #16]
 8001264:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001268:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800126c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800126e:	f7ff ff9d 	bl	80011ac <HAL_RCC_GetSysClockFreq>
 8001272:	686b      	ldr	r3, [r5, #4]
 8001274:	4a35      	ldr	r2, [pc, #212]	; (800134c <HAL_RCC_ClockConfig+0x12c>)
 8001276:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800127a:	5cd3      	ldrb	r3, [r2, r3]
 800127c:	40d8      	lsrs	r0, r3
 800127e:	4b34      	ldr	r3, [pc, #208]	; (8001350 <HAL_RCC_ClockConfig+0x130>)
 8001280:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001282:	4b34      	ldr	r3, [pc, #208]	; (8001354 <HAL_RCC_ClockConfig+0x134>)
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	f7ff fa27 	bl	80006d8 <HAL_InitTick>
  return HAL_OK;
 800128a:	2000      	movs	r0, #0
 800128c:	e7ce      	b.n	800122c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128e:	6813      	ldr	r3, [r2, #0]
 8001290:	f023 0307 	bic.w	r3, r3, #7
 8001294:	430b      	orrs	r3, r1
 8001296:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001298:	6813      	ldr	r3, [r2, #0]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	428b      	cmp	r3, r1
 80012a0:	d1c3      	bne.n	800122a <HAL_RCC_ClockConfig+0xa>
 80012a2:	e7cb      	b.n	800123c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <HAL_RCC_ClockConfig+0x128>)
 80012a6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012aa:	bf1e      	ittt	ne
 80012ac:	685a      	ldrne	r2, [r3, #4]
 80012ae:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80012b2:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012b6:	bf42      	ittt	mi
 80012b8:	685a      	ldrmi	r2, [r3, #4]
 80012ba:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80012be:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	68a0      	ldr	r0, [r4, #8]
 80012c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80012c8:	4302      	orrs	r2, r0
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	e7b9      	b.n	8001242 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ce:	6862      	ldr	r2, [r4, #4]
 80012d0:	4e1d      	ldr	r6, [pc, #116]	; (8001348 <HAL_RCC_ClockConfig+0x128>)
 80012d2:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d4:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012d6:	d11a      	bne.n	800130e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012dc:	d0a5      	beq.n	800122a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012de:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e4:	f023 0303 	bic.w	r3, r3, #3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80012ec:	f7ff fa36 	bl	800075c <HAL_GetTick>
 80012f0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f2:	6873      	ldr	r3, [r6, #4]
 80012f4:	6862      	ldr	r2, [r4, #4]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012fe:	d0a2      	beq.n	8001246 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001300:	f7ff fa2c 	bl	800075c <HAL_GetTick>
 8001304:	1bc0      	subs	r0, r0, r7
 8001306:	4540      	cmp	r0, r8
 8001308:	d9f3      	bls.n	80012f2 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800130a:	2003      	movs	r0, #3
 800130c:	e78e      	b.n	800122c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800130e:	2a02      	cmp	r2, #2
 8001310:	d102      	bne.n	8001318 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001312:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001316:	e7e1      	b.n	80012dc <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001318:	f013 0f02 	tst.w	r3, #2
 800131c:	e7de      	b.n	80012dc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131e:	6813      	ldr	r3, [r2, #0]
 8001320:	f023 0307 	bic.w	r3, r3, #7
 8001324:	432b      	orrs	r3, r5
 8001326:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001328:	6813      	ldr	r3, [r2, #0]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	42ab      	cmp	r3, r5
 8001330:	f47f af7b 	bne.w	800122a <HAL_RCC_ClockConfig+0xa>
 8001334:	e78d      	b.n	8001252 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001336:	686b      	ldr	r3, [r5, #4]
 8001338:	68e1      	ldr	r1, [r4, #12]
 800133a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800133e:	430b      	orrs	r3, r1
 8001340:	606b      	str	r3, [r5, #4]
 8001342:	e78b      	b.n	800125c <HAL_RCC_ClockConfig+0x3c>
 8001344:	40022000 	.word	0x40022000
 8001348:	40021000 	.word	0x40021000
 800134c:	080013f0 	.word	0x080013f0
 8001350:	20000000 	.word	0x20000000
 8001354:	20000008 	.word	0x20000008

08001358 <__libc_init_array>:
 8001358:	b570      	push	{r4, r5, r6, lr}
 800135a:	2600      	movs	r6, #0
 800135c:	4d0c      	ldr	r5, [pc, #48]	; (8001390 <__libc_init_array+0x38>)
 800135e:	4c0d      	ldr	r4, [pc, #52]	; (8001394 <__libc_init_array+0x3c>)
 8001360:	1b64      	subs	r4, r4, r5
 8001362:	10a4      	asrs	r4, r4, #2
 8001364:	42a6      	cmp	r6, r4
 8001366:	d109      	bne.n	800137c <__libc_init_array+0x24>
 8001368:	f000 f830 	bl	80013cc <_init>
 800136c:	2600      	movs	r6, #0
 800136e:	4d0a      	ldr	r5, [pc, #40]	; (8001398 <__libc_init_array+0x40>)
 8001370:	4c0a      	ldr	r4, [pc, #40]	; (800139c <__libc_init_array+0x44>)
 8001372:	1b64      	subs	r4, r4, r5
 8001374:	10a4      	asrs	r4, r4, #2
 8001376:	42a6      	cmp	r6, r4
 8001378:	d105      	bne.n	8001386 <__libc_init_array+0x2e>
 800137a:	bd70      	pop	{r4, r5, r6, pc}
 800137c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001380:	4798      	blx	r3
 8001382:	3601      	adds	r6, #1
 8001384:	e7ee      	b.n	8001364 <__libc_init_array+0xc>
 8001386:	f855 3b04 	ldr.w	r3, [r5], #4
 800138a:	4798      	blx	r3
 800138c:	3601      	adds	r6, #1
 800138e:	e7f2      	b.n	8001376 <__libc_init_array+0x1e>
 8001390:	08001414 	.word	0x08001414
 8001394:	08001414 	.word	0x08001414
 8001398:	08001414 	.word	0x08001414
 800139c:	08001418 	.word	0x08001418

080013a0 <memcpy>:
 80013a0:	440a      	add	r2, r1
 80013a2:	4291      	cmp	r1, r2
 80013a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80013a8:	d100      	bne.n	80013ac <memcpy+0xc>
 80013aa:	4770      	bx	lr
 80013ac:	b510      	push	{r4, lr}
 80013ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80013b2:	4291      	cmp	r1, r2
 80013b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80013b8:	d1f9      	bne.n	80013ae <memcpy+0xe>
 80013ba:	bd10      	pop	{r4, pc}

080013bc <memset>:
 80013bc:	4603      	mov	r3, r0
 80013be:	4402      	add	r2, r0
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d100      	bne.n	80013c6 <memset+0xa>
 80013c4:	4770      	bx	lr
 80013c6:	f803 1b01 	strb.w	r1, [r3], #1
 80013ca:	e7f9      	b.n	80013c0 <memset+0x4>

080013cc <_init>:
 80013cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ce:	bf00      	nop
 80013d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013d2:	bc08      	pop	{r3}
 80013d4:	469e      	mov	lr, r3
 80013d6:	4770      	bx	lr

080013d8 <_fini>:
 80013d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013da:	bf00      	nop
 80013dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013de:	bc08      	pop	{r3}
 80013e0:	469e      	mov	lr, r3
 80013e2:	4770      	bx	lr
